// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("signUpDate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get signUpDate(): BigInt {
    let value = this.get("signUpDate");
    return value!.toBigInt();
  }

  set signUpDate(value: BigInt) {
    this.set("signUpDate", Value.fromBigInt(value));
  }

  get executor(): Bytes | null {
    let value = this.get("executor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set executor(value: Bytes | null) {
    if (!value) {
      this.unset("executor");
    } else {
      this.set("executor", Value.fromBytes(<Bytes>value));
    }
  }
}

export class TaskReceiptWrapper extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromString(""));
    this.set("taskReceipt", Value.fromString(""));
    this.set("submissionHash", Value.fromBytes(Bytes.empty()));
    this.set("status", Value.fromString(""));
    this.set("submissionDate", Value.fromBigInt(BigInt.zero()));
    this.set("selectedExecutor", Value.fromBytes(Bytes.empty()));
    this.set("selfProvided", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TaskReceiptWrapper entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TaskReceiptWrapper entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TaskReceiptWrapper", id.toString(), this);
    }
  }

  static load(id: string): TaskReceiptWrapper | null {
    return changetype<TaskReceiptWrapper | null>(
      store.get("TaskReceiptWrapper", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get taskReceipt(): string {
    let value = this.get("taskReceipt");
    return value!.toString();
  }

  set taskReceipt(value: string) {
    this.set("taskReceipt", Value.fromString(value));
  }

  get submissionHash(): Bytes {
    let value = this.get("submissionHash");
    return value!.toBytes();
  }

  set submissionHash(value: Bytes) {
    this.set("submissionHash", Value.fromBytes(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get submissionDate(): BigInt {
    let value = this.get("submissionDate");
    return value!.toBigInt();
  }

  set submissionDate(value: BigInt) {
    this.set("submissionDate", Value.fromBigInt(value));
  }

  get selectedExecutor(): Bytes {
    let value = this.get("selectedExecutor");
    return value!.toBytes();
  }

  set selectedExecutor(value: Bytes) {
    this.set("selectedExecutor", Value.fromBytes(value));
  }

  get executionDate(): BigInt | null {
    let value = this.get("executionDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executionDate(value: BigInt | null) {
    if (!value) {
      this.unset("executionDate");
    } else {
      this.set("executionDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get executionHash(): Bytes | null {
    let value = this.get("executionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set executionHash(value: Bytes | null) {
    if (!value) {
      this.unset("executionHash");
    } else {
      this.set("executionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get selfProvided(): boolean {
    let value = this.get("selfProvided");
    return value!.toBoolean();
  }

  set selfProvided(value: boolean) {
    this.set("selfProvided", Value.fromBoolean(value));
  }
}

export class TaskReceipt extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("userProxy", Value.fromBytes(Bytes.empty()));
    this.set("provider", Value.fromString(""));
    this.set("index", Value.fromBigInt(BigInt.zero()));
    this.set("expiryDate", Value.fromBigInt(BigInt.zero()));
    this.set("cycleId", Value.fromBigInt(BigInt.zero()));
    this.set("submissionsLeft", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TaskReceipt entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TaskReceipt entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TaskReceipt", id.toString(), this);
    }
  }

  static load(id: string): TaskReceipt | null {
    return changetype<TaskReceipt | null>(store.get("TaskReceipt", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userProxy(): Bytes {
    let value = this.get("userProxy");
    return value!.toBytes();
  }

  set userProxy(value: Bytes) {
    this.set("userProxy", Value.fromBytes(value));
  }

  get provider(): string {
    let value = this.get("provider");
    return value!.toString();
  }

  set provider(value: string) {
    this.set("provider", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value!.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get tasks(): Array<string> | null {
    let value = this.get("tasks");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tasks(value: Array<string> | null) {
    if (!value) {
      this.unset("tasks");
    } else {
      this.set("tasks", Value.fromStringArray(<Array<string>>value));
    }
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    return value!.toBigInt();
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }

  get cycleId(): BigInt {
    let value = this.get("cycleId");
    return value!.toBigInt();
  }

  set cycleId(value: BigInt) {
    this.set("cycleId", Value.fromBigInt(value));
  }

  get submissionsLeft(): BigInt {
    let value = this.get("submissionsLeft");
    return value!.toBigInt();
  }

  set submissionsLeft(value: BigInt) {
    this.set("submissionsLeft", Value.fromBigInt(value));
  }
}

export class TaskCycle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("taskReceiptWrappers", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TaskCycle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TaskCycle entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TaskCycle", id.toString(), this);
    }
  }

  static load(id: string): TaskCycle | null {
    return changetype<TaskCycle | null>(store.get("TaskCycle", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get taskReceiptWrappers(): Array<string> {
    let value = this.get("taskReceiptWrappers");
    return value!.toStringArray();
  }

  set taskReceiptWrappers(value: Array<string>) {
    this.set("taskReceiptWrappers", Value.fromStringArray(value));
  }
}

export class Task extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("selfProviderGasLimit", Value.fromBigInt(BigInt.zero()));
    this.set("selfProviderGasPriceCeil", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Task entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Task entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Task", id.toString(), this);
    }
  }

  static load(id: string): Task | null {
    return changetype<Task | null>(store.get("Task", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get conditions(): Array<string> | null {
    let value = this.get("conditions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set conditions(value: Array<string> | null) {
    if (!value) {
      this.unset("conditions");
    } else {
      this.set("conditions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get actions(): Array<string> | null {
    let value = this.get("actions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set actions(value: Array<string> | null) {
    if (!value) {
      this.unset("actions");
    } else {
      this.set("actions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get selfProviderGasLimit(): BigInt {
    let value = this.get("selfProviderGasLimit");
    return value!.toBigInt();
  }

  set selfProviderGasLimit(value: BigInt) {
    this.set("selfProviderGasLimit", Value.fromBigInt(value));
  }

  get selfProviderGasPriceCeil(): BigInt {
    let value = this.get("selfProviderGasPriceCeil");
    return value!.toBigInt();
  }

  set selfProviderGasPriceCeil(value: BigInt) {
    this.set("selfProviderGasPriceCeil", Value.fromBigInt(value));
  }
}

export class Provider extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("addr", Value.fromBytes(Bytes.empty()));
    this.set("module", Value.fromBytes(Bytes.empty()));
    this.set("taskCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Provider entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Provider entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Provider", id.toString(), this);
    }
  }

  static load(id: string): Provider | null {
    return changetype<Provider | null>(store.get("Provider", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addr(): Bytes {
    let value = this.get("addr");
    return value!.toBytes();
  }

  set addr(value: Bytes) {
    this.set("addr", Value.fromBytes(value));
  }

  get module(): Bytes {
    let value = this.get("module");
    return value!.toBytes();
  }

  set module(value: Bytes) {
    this.set("module", Value.fromBytes(value));
  }

  get taskCount(): BigInt {
    let value = this.get("taskCount");
    return value!.toBigInt();
  }

  set taskCount(value: BigInt) {
    this.set("taskCount", Value.fromBigInt(value));
  }
}

export class Condition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("inst", Value.fromBytes(Bytes.empty()));
    this.set("data", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Condition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Condition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Condition", id.toString(), this);
    }
  }

  static load(id: string): Condition | null {
    return changetype<Condition | null>(store.get("Condition", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get inst(): Bytes {
    let value = this.get("inst");
    return value!.toBytes();
  }

  set inst(value: Bytes) {
    this.set("inst", Value.fromBytes(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value!.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }
}

export class Action extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("addr", Value.fromBytes(Bytes.empty()));
    this.set("data", Value.fromBytes(Bytes.empty()));
    this.set("operation", Value.fromBigInt(BigInt.zero()));
    this.set("dataFlow", Value.fromBigInt(BigInt.zero()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("termsOkCheck", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Action entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Action entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Action", id.toString(), this);
    }
  }

  static load(id: string): Action | null {
    return changetype<Action | null>(store.get("Action", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addr(): Bytes {
    let value = this.get("addr");
    return value!.toBytes();
  }

  set addr(value: Bytes) {
    this.set("addr", Value.fromBytes(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value!.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get operation(): BigInt {
    let value = this.get("operation");
    return value!.toBigInt();
  }

  set operation(value: BigInt) {
    this.set("operation", Value.fromBigInt(value));
  }

  get dataFlow(): BigInt {
    let value = this.get("dataFlow");
    return value!.toBigInt();
  }

  set dataFlow(value: BigInt) {
    this.set("dataFlow", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get termsOkCheck(): boolean {
    let value = this.get("termsOkCheck");
    return value!.toBoolean();
  }

  set termsOkCheck(value: boolean) {
    this.set("termsOkCheck", Value.fromBoolean(value));
  }
}

export class Executor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("addr", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Executor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Executor entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Executor", id.toString(), this);
    }
  }

  static load(id: string): Executor | null {
    return changetype<Executor | null>(store.get("Executor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addr(): Bytes {
    let value = this.get("addr");
    return value!.toBytes();
  }

  set addr(value: Bytes) {
    this.set("addr", Value.fromBytes(value));
  }
}
